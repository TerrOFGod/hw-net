version: '3.0'

services:
  frontend:
    build: 
      context: src/client
      dockerfile: Dockerfile
      args:
        server_url: http://localhost:8081
        file_server_url: http://localhost:8083
        metadata_server_url: http:/localhost:8084
    ports:
      - '8080:80'

  message-api:
    build:
      context: src/server
      dockerfile: ProSiRMQ.Message.API/Dockerfile
    ports:
      - '8081:80'
    depends_on:
      - rabbit
      - database
      - cache
    environment:
      - RABBITMQ_HOST=rabbit

      - DB_HOST=database
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=postgres

      - CACHE_SETTINGS__HOST=cache
      - CACHE_SETTINGS__PORT=6379
      - CACHE_SETTINGS__PASSWORD=Password

  message-listener:
    build:
      context: src/server
      dockerfile: ProSiRMQ.Message.Listener/Dockerfile
    ports:
      - '8082:80'
    depends_on:
      - rabbit
      - database
    environment:
      - RABBITMQ_HOST=rabbit

      - DB_HOST=database
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=postgres

  file-api:
    build:
      context: src/server
      dockerfile: ProSiRMQ.File.API/Dockerfile
    ports:
      - '8083:80'
    depends_on:
      - minio
    environment:
      S3__HOST: http://minio:9000
      S3__USER: minio_user
      S3__PASSWORD: minio_password
      S3__TEMPORARY: "temp"
      S3__PERSISTENT: "persistent"


      CACHE_SETTINGS__HOST: cache
      CACHE_SETTINGS__PORT: 6379
      CACHE_SETTINGS__PASSWORD: Password

      RABBITMQ_HOST: rabbit

  metadata-api:
    build:
      context: src/server
      dockerfile: ProSiRMQ.Metadata.API/Dockerfile
    ports:
      - '8084:80'
    depends_on:
      - rabbit
      - mongo
      - cache
    environment:
      RABBITMQ_HOST: rabbit

      CACHE_SETTINGS__HOST: cache
      CACHE_SETTINGS__PORT: 6379
      CACHE_SETTINGS__PASSWORD: Password

      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: User
      MONGO_PASSWORD: Password
      MONGO_DATABASE: Metadata

  metadata-listener:
    build:
      context: src/server
      dockerfile: ProSiRMQ.Message.Listener/Dockerfile
    ports:
      - '8085:80'
    depends_on:
      - rabbit
      - mongo
      - cache
    environment:
      RABBITMQ_HOST: rabbit

      S3__HOST: http://minio:9000
      S3__USER: minio_user
      S3__PASSWORD: minio_password
      S3__BUCKET: "user-files"

      CACHE_SETTINGS__HOST: cache
      CACHE_SETTINGS__PORT: 6379
      CACHE_SETTINGS__PASSWORD: Password

      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_USERNAME: User
      MONGO_PASSWORD: Password
      MONGO_DATABASE: Metadata

  cache:
    image: bitnami/redis
    ports:
      - "6379:6379"
    volumes:
      - ~/cache/data:/bitnami/redis/data
    environment:
      REDIS_PASSWORD: Password
      REDIS_DISABLE_COMMANDS: FLUSHDB,FLUSHALL

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - ~/metadata-db/data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: User
      MONGO_INITDB_ROOT_PASSWORD: Password

  minio:
    image: minio/minio
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
    volumes:
      - minio-storage:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  rabbit:
    image: rabbitmq:3.7-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - ~/broker/data:/var/lib/rabbitmq
      - ~/broker/logs:/var/log/rabbitmq

  collect-it:
    build:
      context: src/collect-it/src
      dockerfile: CollectIt.MVC/CollectIt.MVC.View/Dockerfile
    ports:
      - '8086:80'
    environment:
      ConnectionStrings:Postgresql:Development: 'Host=localhost;User ID=postgres;Password=postgres;Port=5433;Database=postgres;'
  
  database-collect-it:
    image: postgres:14-alpine
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USERNAME: postgres
    ports:
      - '5433:5432'
    volumes:
      - collect-it-db:/var/lib/postgresql/data

  database:
    image: postgres:14-alpine
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USERNAME=postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata_1:/var/lib/postgresql/data
      - pgconf_1:/etc/postgresql
      - pglog_1:/var/log/postgresql
   
volumes:
  pgdata_1:
    driver: local
  pgconf_1:
    driver: local
  pglog_1:
    driver: local
  minio-storage:
    driver: local
  collect-it-db:
    driver: local