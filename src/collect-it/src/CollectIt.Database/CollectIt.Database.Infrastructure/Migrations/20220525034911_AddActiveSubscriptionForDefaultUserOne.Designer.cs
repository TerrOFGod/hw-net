// <auto-generated />
using System;
using CollectIt.Database.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

#nullable disable

namespace CollectIt.MVC.View.Migrations
{
    [DbContext(typeof(PostgresqlCollectItDbContext))]
    [Migration("20220525034911_AddActiveSubscriptionForDefaultUserOne")]
    partial class AddActiveSubscriptionForDefaultUserOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CollectIt.Database.Entities.Account.AcquiredUserResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcquiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ResourceId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserId", "ResourceId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("UserId");

                    b.ToTable("AcquiredUserResources");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 20,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 21,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 22,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 16,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 17,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 18,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 19,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 12,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 13,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 6,
                            UserId = 1
                        },
                        new
                        {
                            Id = 14,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 7,
                            UserId = 1
                        },
                        new
                        {
                            Id = 15,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 8,
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 9,
                            UserId = 1
                        },
                        new
                        {
                            Id = 17,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 10,
                            UserId = 1
                        },
                        new
                        {
                            Id = 18,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 11,
                            UserId = 1
                        },
                        new
                        {
                            Id = 19,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 12,
                            UserId = 1
                        },
                        new
                        {
                            Id = 20,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 13,
                            UserId = 1
                        },
                        new
                        {
                            Id = 21,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 14,
                            UserId = 1
                        },
                        new
                        {
                            Id = 22,
                            AcquiredDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            ResourceId = 15,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.ActiveUserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateInterval>("During")
                        .IsRequired()
                        .HasColumnType("daterange");

                    b.Property<int>("LeftResourcesCount")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToView("ActiveUsersSubscriptions");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Restrictions.Restriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RestrictionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Restriction");

                    b.HasDiscriminator<int>("RestrictionType");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "DEFAULT_STAMP",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "DEFAULT_STAMP",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "DEFAULT_STAMP",
                            Name = "Technical Support",
                            NormalizedName = "TECHNICAL SUPPORT"
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AppliedResourceType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxResourcesCount")
                        .HasColumnType("integer");

                    b.Property<int>("MonthDuration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int?>("RestrictionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Active");

                    b.HasIndex("RestrictionId")
                        .IsUnique();

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AppliedResourceType = "Image",
                            Description = "Обычная подписка",
                            MaxResourcesCount = 50,
                            MonthDuration = 1,
                            Name = "Бронзовая",
                            Price = 200
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            AppliedResourceType = "Image",
                            Description = "Подписка для любителей качать",
                            MaxResourcesCount = 100,
                            MonthDuration = 1,
                            Name = "Серебрянная",
                            Price = 350
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            AppliedResourceType = "Image",
                            Description = "Не для пиратов",
                            MaxResourcesCount = 200,
                            MonthDuration = 1,
                            Name = "Золотая",
                            Price = 500
                        },
                        new
                        {
                            Id = 5,
                            Active = false,
                            AppliedResourceType = "Any",
                            Description = "Этот тип подписки только для привилегированных. Скачивай что хочешь.",
                            MaxResourcesCount = 2147483647,
                            MonthDuration = 120000,
                            Name = "Кардбланш",
                            Price = 2147483647
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e0213e9-8d80-48df-b9df-18fc7debd84e",
                            Email = "asdf@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ASDF@MAIL.RU",
                            NormalizedUserName = "BESTPHOTOSHOPER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAO/K1C4Jn77AXrULgaNn6rkHlrkXbk9jOqHqe+HK+CvDgmBEEFahFadKE8H7x4Olw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "MSCN3JBQERUJBPLR4XIXZH3TQGICF6O3",
                            TwoFactorEnabled = false,
                            UserName = "BestPhotoshoper"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fac5fa96-0453-4eaf-bebb-bc7ad73299d2",
                            Email = "user@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.RU",
                            NormalizedUserName = "NINEONEONE",
                            PasswordHash = "AQAAAAEAACcQAAAAEO63OCfJlqJdesMS4+ORyynU0r6Y/3x8u0j9ZQsd52y6ELqZG0f1X/WN49PV2NQWkA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "A7NZSQXBUSPXKD4PTF5DPC3LTROWH2PH",
                            TwoFactorEnabled = false,
                            UserName = "NineOneOne"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1a6e983-61f0-4fe3-b201-e8131080d312",
                            Email = "andrey1999@yandex.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREY1999@YANDEX.RU",
                            NormalizedUserName = "ANDREYPHOTO",
                            PasswordHash = "AQAAAAEAACcQAAAAEDFG3rJjU9RopPeh1w+EePG21c/o6h2ng8hgRiQactvUbYOKSeLjxL/HAhJfDsuO0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AG44W4JZWJVREA7HQRCKUFDSNZDYKCAW",
                            TwoFactorEnabled = false,
                            UserName = "AndreyPhoto"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31ab9dd7-d86c-4640-aa97-22ff38176d94",
                            Email = "mail@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MAIL@MAIL.RU",
                            NormalizedUserName = "DISCRIMINATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEENZCDY7KW1yCVxiLaIjILavAHSPVWMvTeb0YjDdOK74mqCBqby19ul9VfFQk6Il9A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "TX26HJDK44UKB7FQTM3WSW7A5K4PRRS6",
                            TwoFactorEnabled = false,
                            UserName = "Discriminator"
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateInterval>("During")
                        .IsRequired()
                        .HasColumnType("daterange");

                    b.Property<int>("LeftResourcesCount")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            During = new NodaTime.DateInterval(new NodaTime.LocalDate(2000, 1, 1), new NodaTime.LocalDate(9999, 12, 31)),
                            LeftResourcesCount = 2147483647,
                            SubscriptionId = 5,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            During = new NodaTime.DateInterval(new NodaTime.LocalDate(2021, 3, 1), new NodaTime.LocalDate(2021, 5, 9)),
                            LeftResourcesCount = 0,
                            SubscriptionId = 2,
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            During = new NodaTime.DateInterval(new NodaTime.LocalDate(2021, 5, 10), new NodaTime.LocalDate(2022, 1, 10)),
                            LeftResourcesCount = 2,
                            SubscriptionId = 3,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            During = new NodaTime.DateInterval(new NodaTime.LocalDate(2022, 2, 20), new NodaTime.LocalDate(2022, 5, 20)),
                            LeftResourcesCount = 50,
                            SubscriptionId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 5,
                            During = new NodaTime.DateInterval(new NodaTime.LocalDate(2022, 5, 1), new NodaTime.LocalDate(2022, 7, 1)),
                            LeftResourcesCount = 200,
                            SubscriptionId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CommentId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TargetId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("NameSearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<NpgsqlTsVector>("TagsSearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "russian")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Tags" });

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NameSearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NameSearchVector"), "GIN");

                    b.HasIndex("OwnerId");

                    b.HasIndex(new[] { "TagsSearchVector" }, "IX_Resources_TagsSearchVector");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex(new[] { "TagsSearchVector" }, "IX_Resources_TagsSearchVector"), "GIN");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Descriptions")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("integer");

                    b.Property<int?>("AuthorizationId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyToken = "05fa1fe4-a237-4abc-a242-fa56c18c08ee",
                            CreationDate = new DateTime(2022, 4, 13, 14, 13, 30, 0, DateTimeKind.Utc),
                            ExpirationDate = new DateTime(2025, 4, 12, 14, 13, 30, 0, DateTimeKind.Utc),
                            Status = "valid",
                            Subject = "1",
                            Type = "access_token"
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Restrictions.AuthorRestriction", b =>
                {
                    b.HasBaseType("CollectIt.Database.Entities.Account.Restrictions.Restriction");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.HasIndex("AuthorId");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Restrictions.DaysAfterRestriction", b =>
                {
                    b.HasBaseType("CollectIt.Database.Entities.Account.Restrictions.Restriction");

                    b.Property<int>("DaysAfter")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Restrictions.DaysToRestriction", b =>
                {
                    b.HasBaseType("CollectIt.Database.Entities.Account.Restrictions.Restriction");

                    b.Property<int>("DaysTo")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Restrictions.SizeRestriction", b =>
                {
                    b.HasBaseType("CollectIt.Database.Entities.Account.Restrictions.Restriction");

                    b.Property<int>("SizeBytes")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Restrictions.TagRestriction", b =>
                {
                    b.HasBaseType("CollectIt.Database.Entities.Account.Restrictions.Restriction");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Image", b =>
                {
                    b.HasBaseType("CollectIt.Database.Entities.Resources.Resource");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Extension = "jpg",
                            FileName = "abstract-img.jpg",
                            Name = "Мониторы с аниме",
                            OwnerId = 1,
                            Tags = new[] { "аниме", "фоллаут" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Extension = "jpg",
                            FileName = "bird-img.jpg",
                            Name = "Птица зимородок",
                            OwnerId = 1,
                            Tags = new[] { "птица", "природа" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Extension = "jpg",
                            FileName = "car-img.jpg",
                            Name = "Машина на дороге",
                            OwnerId = 4,
                            Tags = new[] { "машина" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Extension = "jpg",
                            FileName = "cat-img.jpg",
                            Name = "Котенок на одеяле",
                            OwnerId = 1,
                            Tags = new[] { "кот", "животное", "питомец" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            Extension = "jpg",
                            FileName = "house-img.jpg",
                            Name = "Стандартный американский дом",
                            OwnerId = 4,
                            Tags = new[] { "дом" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            Extension = "jpg",
                            FileName = "nature-img.jpg",
                            Name = "Осенний лес в природе",
                            OwnerId = 2,
                            Tags = new[] { "природа" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            Extension = "jpg",
                            FileName = "school-img.jpg",
                            Name = "Дети за партами в школе перед учителем",
                            OwnerId = 1,
                            Tags = new[] { "школа", "дети" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            Extension = "jpg",
                            FileName = "cat-img-2.jpg",
                            Name = "Кот смотрит в камеру на зеленом фоне",
                            OwnerId = 1,
                            Tags = new[] { "кот", "питомец", "животное" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            Extension = "jpg",
                            FileName = "cat-img-3.jpg",
                            Name = "Крутой кот в очках",
                            OwnerId = 1,
                            Tags = new[] { "кот", "питомец", "животное", "очки" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            Extension = "jpg",
                            FileName = "cat-img-4.jpg",
                            Name = "Белоснежный кот застыл в мяукающей позе",
                            OwnerId = 1,
                            Tags = new[] { "кот", "питомец", "животное" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            Extension = "jpg",
                            FileName = "cat-img-5.jpg",
                            Name = "Рыжий кот заснул на полу",
                            OwnerId = 2,
                            Tags = new[] { "кот", "питомец", "животное" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 12,
                            Extension = "jpg",
                            FileName = "cat-img-6.jpg",
                            Name = "Спящий кот прикрывается лапой от солнца",
                            OwnerId = 3,
                            Tags = new[] { "кот", "питомец", "животное" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 13,
                            Extension = "jpg",
                            FileName = "cat-img-7.jpg",
                            Name = "На стуле лежит кот",
                            OwnerId = 1,
                            Tags = new[] { "кот", "питомец", "животное", "стул", "мебель" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 14,
                            Extension = "jpg",
                            FileName = "cat-img-8.jpg",
                            Name = "Идущий по забору кот у причала",
                            OwnerId = 1,
                            Tags = new[] { "кот", "питомец", "животное", "яхта", "море" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 15,
                            Extension = "jpg",
                            FileName = "cat-img-9.jpg",
                            Name = "Кот у елки сморит на лес",
                            OwnerId = 3,
                            Tags = new[] { "кот", "питомец", "животное", "природа" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Music", b =>
                {
                    b.HasBaseType("CollectIt.Database.Entities.Resources.Resource");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.ToTable("Musics");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            Extension = "mp3",
                            FileName = "тектоник-басы.mp3",
                            Name = "Тектоник - Басы",
                            OwnerId = 1,
                            Tags = new[] { "качает", "2007" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            Duration = 69
                        },
                        new
                        {
                            Id = 17,
                            Extension = "mp3",
                            FileName = "MORGENSHTERN_JESTKO_VALIT.mp3",
                            Name = "OG BUDA, MORGENSHTERN, Mayot, blago white, SODA LUV - Cristal & МОЁТ (Remix)",
                            OwnerId = 1,
                            Tags = new[] { "качает", "морген", "сода лув", "ог буда" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            Duration = 219
                        },
                        new
                        {
                            Id = 18,
                            Extension = "mp3",
                            FileName = "naruto_bluebird.mp3",
                            Name = "OST Naruto shippuden Ikimono-gakari - Blue Bird OP3",
                            OwnerId = 1,
                            Tags = new[] { "аниме", "наруто", "афган" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            Duration = 218
                        },
                        new
                        {
                            Id = 19,
                            Extension = "mp3",
                            FileName = "minin_zeleniy_glaz.mp3",
                            Name = "минин - Зелёный глаз",
                            OwnerId = 1,
                            Tags = new[] { "грусть", "тикток", "рэп про тёлку" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            Duration = 114
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Video", b =>
                {
                    b.HasBaseType("CollectIt.Database.Entities.Resources.Resource");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.ToTable("Videos");

                    b.HasData(
                        new
                        {
                            Id = 20,
                            Extension = "webm",
                            FileName = "diman.webm",
                            Name = "Диско лицо",
                            OwnerId = 1,
                            Tags = new[] { "Брекоткин", "диско лицо", "диско" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            Duration = 60
                        },
                        new
                        {
                            Id = 21,
                            Extension = "webm",
                            FileName = "strong_monolog.webm",
                            Name = "Сильный монолог на фоне церковных песнопений и красивой картинки",
                            OwnerId = 1,
                            Tags = new[] { "аниме", "церковь", "2д", "монолог" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            Duration = 60
                        },
                        new
                        {
                            Id = 22,
                            Extension = "mp4",
                            FileName = "polish-cow.mp4",
                            Name = "Какое-то видео",
                            OwnerId = 1,
                            Tags = new[] { "видео", "просто", "что" },
                            UploadDate = new DateTime(2022, 3, 27, 10, 56, 59, 207, DateTimeKind.Utc),
                            Duration = 60
                        });
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.AcquiredUserResource", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Resources.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CollectIt.Database.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.ActiveUserSubscription", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CollectIt.Database.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Subscription", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.Restrictions.Restriction", "Restriction")
                        .WithOne("Subscription")
                        .HasForeignKey("CollectIt.Database.Entities.Account.Subscription", "RestrictionId");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.UserSubscription", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CollectIt.Database.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Comment", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CollectIt.Database.Entities.Resources.Resource", "Target")
                        .WithMany()
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Resource", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.User", "Owner")
                        .WithMany("ResourcesAuthorOf")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CollectIt.Database.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken<int>", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Restrictions.AuthorRestriction", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Account.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Image", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Resources.Resource", null)
                        .WithOne()
                        .HasForeignKey("CollectIt.Database.Entities.Resources.Image", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Music", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Resources.Resource", null)
                        .WithOne()
                        .HasForeignKey("CollectIt.Database.Entities.Resources.Music", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Resources.Video", b =>
                {
                    b.HasOne("CollectIt.Database.Entities.Resources.Resource", null)
                        .WithOne()
                        .HasForeignKey("CollectIt.Database.Entities.Resources.Video", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.Restrictions.Restriction", b =>
                {
                    b.Navigation("Subscription")
                        .IsRequired();
                });

            modelBuilder.Entity("CollectIt.Database.Entities.Account.User", b =>
                {
                    b.Navigation("ResourcesAuthorOf");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication<int>", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization<int>", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
