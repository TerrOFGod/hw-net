// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "chat.proto" (package "chatPackage", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ChatService } from "./chat";
import type { GetInfoResponse } from "./chat";
import type { GetInfoRequest } from "./chat";
import type { GetMessagesStreamResponse } from "./chat";
import type { GetMessagesStreamRequest } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SendMessageResponse } from "./chat";
import type { SendMessageRequest } from "./chat";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./google/protobuf/empty";
import type { JoinRequest } from "./chat";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service chatPackage.ChatService
 */
export interface IChatServiceClient {
    /**
     * Для админа
     *
     * @generated from protobuf rpc: Join(chatPackage.JoinRequest) returns (google.protobuf.Empty);
     */
    join(input: JoinRequest, options?: RpcOptions): UnaryCall<JoinRequest, Empty>;
    /**
     * Отправить сообщение от лица пользователя
     *
     * @generated from protobuf rpc: SendMessage(chatPackage.SendMessageRequest) returns (chatPackage.SendMessageResponse);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse>;
    /**
     * Подписка на все приходящие в чат сообщения
     *
     * @generated from protobuf rpc: GetMessagesStream(chatPackage.GetMessagesStreamRequest) returns (stream chatPackage.GetMessagesStreamResponse);
     */
    getMessagesStream(input: GetMessagesStreamRequest, options?: RpcOptions): ServerStreamingCall<GetMessagesStreamRequest, GetMessagesStreamResponse>;
    /**
     * @generated from protobuf rpc: GetInfo(chatPackage.GetInfoRequest) returns (stream chatPackage.GetInfoResponse);
     */
    getInfo(input: GetInfoRequest, options?: RpcOptions): ServerStreamingCall<GetInfoRequest, GetInfoResponse>;
}
/**
 * @generated from protobuf service chatPackage.ChatService
 */
export class ChatServiceClient implements IChatServiceClient, ServiceInfo {
    typeName = ChatService.typeName;
    methods = ChatService.methods;
    options = ChatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Для админа
     *
     * @generated from protobuf rpc: Join(chatPackage.JoinRequest) returns (google.protobuf.Empty);
     */
    join(input: JoinRequest, options?: RpcOptions): UnaryCall<JoinRequest, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<JoinRequest, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * Отправить сообщение от лица пользователя
     *
     * @generated from protobuf rpc: SendMessage(chatPackage.SendMessageRequest) returns (chatPackage.SendMessageResponse);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, SendMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Подписка на все приходящие в чат сообщения
     *
     * @generated from protobuf rpc: GetMessagesStream(chatPackage.GetMessagesStreamRequest) returns (stream chatPackage.GetMessagesStreamResponse);
     */
    getMessagesStream(input: GetMessagesStreamRequest, options?: RpcOptions): ServerStreamingCall<GetMessagesStreamRequest, GetMessagesStreamResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMessagesStreamRequest, GetMessagesStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetInfo(chatPackage.GetInfoRequest) returns (stream chatPackage.GetInfoResponse);
     */
    getInfo(input: GetInfoRequest, options?: RpcOptions): ServerStreamingCall<GetInfoRequest, GetInfoResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetInfoRequest, GetInfoResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
